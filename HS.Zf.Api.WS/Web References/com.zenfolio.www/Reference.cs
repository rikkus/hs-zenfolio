//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4927.
// 
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using HS.Zf.WSApi.Properties;

#pragma warning disable 1591

namespace HS.Zf.WSApi.com.zenfolio.www
{
    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name = "ZfApiSoap", Namespace = "http://www.zenfolio.com/api/1.1")]
    [XmlInclude(typeof (GroupElement))]
    public partial class ZfApi : SoapHttpClientProtocol
    {
        private SendOrPostCallback AuthenticateOperationCompleted;
        private SendOrPostCallback AuthenticatePlainOperationCompleted;
        private SendOrPostCallback CollectionAddPhotoOperationCompleted;

        private SendOrPostCallback CollectionRemovePhotoOperationCompleted;
        private SendOrPostCallback CreateGroupOperationCompleted;
        private SendOrPostCallback CreatePhotoSetOperationCompleted;
        private SendOrPostCallback DeleteGroupOperationCompleted;
        private SendOrPostCallback DeletePhotoOperationCompleted;
        private SendOrPostCallback DeletePhotoSetOperationCompleted;

        private SendOrPostCallback GetCategoriesOperationCompleted;
        private SendOrPostCallback GetChallengeOperationCompleted;
        private SendOrPostCallback GetPopularPhotosOperationCompleted;

        private SendOrPostCallback GetPopularSetsOperationCompleted;
        private SendOrPostCallback GetRecentPhotosOperationCompleted;

        private SendOrPostCallback GetRecentSetsOperationCompleted;
        private SendOrPostCallback KeyringAddKeyPlainOperationCompleted;
        private SendOrPostCallback LoadGroupHierarchyOperationCompleted;

        private SendOrPostCallback LoadGroupOperationCompleted;
        private SendOrPostCallback LoadPhotoOperationCompleted;
        private SendOrPostCallback LoadPhotoSetOperationCompleted;
        private SendOrPostCallback LoadPrivateProfileOperationCompleted;

        private SendOrPostCallback LoadPublicProfileOperationCompleted;
        private SendOrPostCallback MoveGroupOperationCompleted;
        private SendOrPostCallback MovePhotoOperationCompleted;
        private SendOrPostCallback MovePhotoSetOperationCompleted;
        private SendOrPostCallback PartnerAuthenticateOperationCompleted;

        private SendOrPostCallback PartnerCreateUserOperationCompleted;
        private SendOrPostCallback PartnerPreAuthenticatePlainOperationCompleted;
        private SendOrPostCallback ReorderGroupOperationCompleted;
        private SendOrPostCallback ReorderPhotoSetOperationCompleted;
        private SendOrPostCallback ReplacePhotoOperationCompleted;
        private SendOrPostCallback RotatePhotoOperationCompleted;

        private SendOrPostCallback SearchPhotoByCategoryOperationCompleted;

        private SendOrPostCallback SearchPhotoByTextOperationCompleted;
        private SendOrPostCallback SearchSetByCategoryOperationCompleted;

        private SendOrPostCallback SearchSetByTextOperationCompleted;
        private SendOrPostCallback SetGroupTitlePhotoOperationCompleted;
        private SendOrPostCallback SetPhotoSetFeaturedIndexOperationCompleted;
        private SendOrPostCallback SetPhotoSetTitlePhotoOperationCompleted;
        private SendOrPostCallback UpdateGroupAccessOperationCompleted;

        private SendOrPostCallback UpdateGroupOperationCompleted;

        private SendOrPostCallback UpdatePhotoAccessOperationCompleted;
        private SendOrPostCallback UpdatePhotoOperationCompleted;

        private SendOrPostCallback UpdatePhotoSetAccessOperationCompleted;
        private SendOrPostCallback UpdatePhotoSetOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public ZfApi()
        {
            Url = Settings.Default.HS_Zf_WSApi_com_zenfolio_www_ZfApi;
            if ((IsLocalFileSystemWebService(Url) == true))
            {
                UseDefaultCredentials = true;
                useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get { return base.Url; }
            set
            {
                if ((((IsLocalFileSystemWebService(base.Url) == true)
                      && (useDefaultCredentialsSetExplicitly == false))
                     && (IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get { return base.UseDefaultCredentials; }
            set
            {
                base.UseDefaultCredentials = value;
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event GetChallengeCompletedEventHandler GetChallengeCompleted;

        /// <remarks/>
        public event PartnerPreAuthenticatePlainCompletedEventHandler PartnerPreAuthenticatePlainCompleted;

        /// <remarks/>
        public event PartnerAuthenticateCompletedEventHandler PartnerAuthenticateCompleted;

        /// <remarks/>
        public event PartnerCreateUserCompletedEventHandler PartnerCreateUserCompleted;

        /// <remarks/>
        public event AuthenticatePlainCompletedEventHandler AuthenticatePlainCompleted;

        /// <remarks/>
        public event AuthenticateCompletedEventHandler AuthenticateCompleted;

        /// <remarks/>
        public event LoadPrivateProfileCompletedEventHandler LoadPrivateProfileCompleted;

        /// <remarks/>
        public event LoadPublicProfileCompletedEventHandler LoadPublicProfileCompleted;

        /// <remarks/>
        public event LoadGroupHierarchyCompletedEventHandler LoadGroupHierarchyCompleted;

        /// <remarks/>
        public event LoadGroupCompletedEventHandler LoadGroupCompleted;

        /// <remarks/>
        public event LoadPhotoSetCompletedEventHandler LoadPhotoSetCompleted;

        /// <remarks/>
        public event LoadPhotoCompletedEventHandler LoadPhotoCompleted;

        /// <remarks/>
        public event KeyringAddKeyPlainCompletedEventHandler KeyringAddKeyPlainCompleted;

        /// <remarks/>
        public event GetCategoriesCompletedEventHandler GetCategoriesCompleted;

        /// <remarks/>
        public event SearchSetByCategoryCompletedEventHandler SearchSetByCategoryCompleted;

        /// <remarks/>
        public event SearchSetByTextCompletedEventHandler SearchSetByTextCompleted;

        /// <remarks/>
        public event GetPopularSetsCompletedEventHandler GetPopularSetsCompleted;

        /// <remarks/>
        public event GetRecentSetsCompletedEventHandler GetRecentSetsCompleted;

        /// <remarks/>
        public event SearchPhotoByCategoryCompletedEventHandler SearchPhotoByCategoryCompleted;

        /// <remarks/>
        public event SearchPhotoByTextCompletedEventHandler SearchPhotoByTextCompleted;

        /// <remarks/>
        public event GetPopularPhotosCompletedEventHandler GetPopularPhotosCompleted;

        /// <remarks/>
        public event GetRecentPhotosCompletedEventHandler GetRecentPhotosCompleted;

        /// <remarks/>
        public event CreateGroupCompletedEventHandler CreateGroupCompleted;

        /// <remarks/>
        public event DeleteGroupCompletedEventHandler DeleteGroupCompleted;

        /// <remarks/>
        public event UpdateGroupCompletedEventHandler UpdateGroupCompleted;

        /// <remarks/>
        public event CreatePhotoSetCompletedEventHandler CreatePhotoSetCompleted;

        /// <remarks/>
        public event DeletePhotoSetCompletedEventHandler DeletePhotoSetCompleted;

        /// <remarks/>
        public event UpdatePhotoSetCompletedEventHandler UpdatePhotoSetCompleted;

        /// <remarks/>
        public event DeletePhotoCompletedEventHandler DeletePhotoCompleted;

        /// <remarks/>
        public event UpdatePhotoCompletedEventHandler UpdatePhotoCompleted;

        /// <remarks/>
        public event CollectionAddPhotoCompletedEventHandler CollectionAddPhotoCompleted;

        /// <remarks/>
        public event CollectionRemovePhotoCompletedEventHandler CollectionRemovePhotoCompleted;

        /// <remarks/>
        public event UpdatePhotoAccessCompletedEventHandler UpdatePhotoAccessCompleted;

        /// <remarks/>
        public event UpdatePhotoSetAccessCompletedEventHandler UpdatePhotoSetAccessCompleted;

        /// <remarks/>
        public event UpdateGroupAccessCompletedEventHandler UpdateGroupAccessCompleted;

        /// <remarks/>
        public event ReorderPhotoSetCompletedEventHandler ReorderPhotoSetCompleted;

        /// <remarks/>
        public event MovePhotoCompletedEventHandler MovePhotoCompleted;

        /// <remarks/>
        public event RotatePhotoCompletedEventHandler RotatePhotoCompleted;

        /// <remarks/>
        public event SetGroupTitlePhotoCompletedEventHandler SetGroupTitlePhotoCompleted;

        /// <remarks/>
        public event SetPhotoSetTitlePhotoCompletedEventHandler SetPhotoSetTitlePhotoCompleted;

        /// <remarks/>
        public event SetPhotoSetFeaturedIndexCompletedEventHandler SetPhotoSetFeaturedIndexCompleted;

        /// <remarks/>
        public event MovePhotoSetCompletedEventHandler MovePhotoSetCompleted;

        /// <remarks/>
        public event ReorderGroupCompletedEventHandler ReorderGroupCompleted;

        /// <remarks/>
        public event ReplacePhotoCompletedEventHandler ReplacePhotoCompleted;

        /// <remarks/>
        public event MoveGroupCompletedEventHandler MoveGroupCompleted;

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/GetChallenge",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public AuthChallenge GetChallenge(string loginName)
        {
            var results = Invoke("GetChallenge", new object[]
                                                     {
                                                         loginName
                                                     });
            return ((AuthChallenge) (results[0]));
        }

        /// <remarks/>
        public void GetChallengeAsync(string loginName)
        {
            GetChallengeAsync(loginName, null);
        }

        /// <remarks/>
        public void GetChallengeAsync(string loginName, object userState)
        {
            if ((GetChallengeOperationCompleted == null))
            {
                GetChallengeOperationCompleted = new SendOrPostCallback(OnGetChallengeOperationCompleted);
            }
            InvokeAsync("GetChallenge", new object[]
                                            {
                                                loginName
                                            }, GetChallengeOperationCompleted, userState);
        }

        private void OnGetChallengeOperationCompleted(object arg)
        {
            if ((GetChallengeCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetChallengeCompleted(this,
                                      new GetChallengeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                         invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/PartnerPreAuthenticatePlain",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public string PartnerPreAuthenticatePlain(string loginName, string password)
        {
            var results = Invoke("PartnerPreAuthenticatePlain", new object[]
                                                                    {
                                                                        loginName,
                                                                        password
                                                                    });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void PartnerPreAuthenticatePlainAsync(string loginName, string password)
        {
            PartnerPreAuthenticatePlainAsync(loginName, password, null);
        }

        /// <remarks/>
        public void PartnerPreAuthenticatePlainAsync(string loginName, string password, object userState)
        {
            if ((PartnerPreAuthenticatePlainOperationCompleted == null))
            {
                PartnerPreAuthenticatePlainOperationCompleted =
                    new SendOrPostCallback(OnPartnerPreAuthenticatePlainOperationCompleted);
            }
            InvokeAsync("PartnerPreAuthenticatePlain", new object[]
                                                           {
                                                               loginName,
                                                               password
                                                           }, PartnerPreAuthenticatePlainOperationCompleted, userState);
        }

        private void OnPartnerPreAuthenticatePlainOperationCompleted(object arg)
        {
            if ((PartnerPreAuthenticatePlainCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                PartnerPreAuthenticatePlainCompleted(this,
                                                     new PartnerPreAuthenticatePlainCompletedEventArgs(
                                                         invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                                                         invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/PartnerAuthenticate",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public string PartnerAuthenticate(string preAuthToken)
        {
            var results = Invoke("PartnerAuthenticate", new object[]
                                                            {
                                                                preAuthToken
                                                            });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void PartnerAuthenticateAsync(string preAuthToken)
        {
            PartnerAuthenticateAsync(preAuthToken, null);
        }

        /// <remarks/>
        public void PartnerAuthenticateAsync(string preAuthToken, object userState)
        {
            if ((PartnerAuthenticateOperationCompleted == null))
            {
                PartnerAuthenticateOperationCompleted = new SendOrPostCallback(OnPartnerAuthenticateOperationCompleted);
            }
            InvokeAsync("PartnerAuthenticate", new object[]
                                                   {
                                                       preAuthToken
                                                   }, PartnerAuthenticateOperationCompleted, userState);
        }

        private void OnPartnerAuthenticateOperationCompleted(object arg)
        {
            if ((PartnerAuthenticateCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                PartnerAuthenticateCompleted(this,
                                             new PartnerAuthenticateCompletedEventArgs(invokeArgs.Results,
                                                                                       invokeArgs.Error,
                                                                                       invokeArgs.Cancelled,
                                                                                       invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/PartnerCreateUser",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public string PartnerCreateUser(string plan, string userName, string password, string email, string displayName)
        {
            var results = Invoke("PartnerCreateUser", new object[]
                                                          {
                                                              plan,
                                                              userName,
                                                              password,
                                                              email,
                                                              displayName
                                                          });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void PartnerCreateUserAsync(string plan, string userName, string password, string email,
                                           string displayName)
        {
            PartnerCreateUserAsync(plan, userName, password, email, displayName, null);
        }

        /// <remarks/>
        public void PartnerCreateUserAsync(string plan, string userName, string password, string email,
                                           string displayName, object userState)
        {
            if ((PartnerCreateUserOperationCompleted == null))
            {
                PartnerCreateUserOperationCompleted = new SendOrPostCallback(OnPartnerCreateUserOperationCompleted);
            }
            InvokeAsync("PartnerCreateUser", new object[]
                                                 {
                                                     plan,
                                                     userName,
                                                     password,
                                                     email,
                                                     displayName
                                                 }, PartnerCreateUserOperationCompleted, userState);
        }

        private void OnPartnerCreateUserOperationCompleted(object arg)
        {
            if ((PartnerCreateUserCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                PartnerCreateUserCompleted(this,
                                           new PartnerCreateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                   invokeArgs.Cancelled,
                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/AuthenticatePlain",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public string AuthenticatePlain(string loginName, string password)
        {
            var results = Invoke("AuthenticatePlain", new object[]
                                                          {
                                                              loginName,
                                                              password
                                                          });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void AuthenticatePlainAsync(string loginName, string password)
        {
            AuthenticatePlainAsync(loginName, password, null);
        }

        /// <remarks/>
        public void AuthenticatePlainAsync(string loginName, string password, object userState)
        {
            if ((AuthenticatePlainOperationCompleted == null))
            {
                AuthenticatePlainOperationCompleted = new SendOrPostCallback(OnAuthenticatePlainOperationCompleted);
            }
            InvokeAsync("AuthenticatePlain", new object[]
                                                 {
                                                     loginName,
                                                     password
                                                 }, AuthenticatePlainOperationCompleted, userState);
        }

        private void OnAuthenticatePlainOperationCompleted(object arg)
        {
            if ((AuthenticatePlainCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                AuthenticatePlainCompleted(this,
                                           new AuthenticatePlainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                   invokeArgs.Cancelled,
                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/Authenticate",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public string Authenticate([XmlElement(DataType = "base64Binary")] byte[] challenge,
                                   [XmlElement(DataType = "base64Binary")] byte[] proof)
        {
            var results = Invoke("Authenticate", new object[]
                                                     {
                                                         challenge,
                                                         proof
                                                     });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void AuthenticateAsync(byte[] challenge, byte[] proof)
        {
            AuthenticateAsync(challenge, proof, null);
        }

        /// <remarks/>
        public void AuthenticateAsync(byte[] challenge, byte[] proof, object userState)
        {
            if ((AuthenticateOperationCompleted == null))
            {
                AuthenticateOperationCompleted = new SendOrPostCallback(OnAuthenticateOperationCompleted);
            }
            InvokeAsync("Authenticate", new object[]
                                            {
                                                challenge,
                                                proof
                                            }, AuthenticateOperationCompleted, userState);
        }

        private void OnAuthenticateOperationCompleted(object arg)
        {
            if ((AuthenticateCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                AuthenticateCompleted(this,
                                      new AuthenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                         invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/LoadPrivateProfile",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public User LoadPrivateProfile()
        {
            var results = Invoke("LoadPrivateProfile", new object[0]);
            return ((User) (results[0]));
        }

        /// <remarks/>
        public void LoadPrivateProfileAsync()
        {
            LoadPrivateProfileAsync(null);
        }

        /// <remarks/>
        public void LoadPrivateProfileAsync(object userState)
        {
            if ((LoadPrivateProfileOperationCompleted == null))
            {
                LoadPrivateProfileOperationCompleted = new SendOrPostCallback(OnLoadPrivateProfileOperationCompleted);
            }
            InvokeAsync("LoadPrivateProfile", new object[0], LoadPrivateProfileOperationCompleted, userState);
        }

        private void OnLoadPrivateProfileOperationCompleted(object arg)
        {
            if ((LoadPrivateProfileCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                LoadPrivateProfileCompleted(this,
                                            new LoadPrivateProfileCompletedEventArgs(invokeArgs.Results,
                                                                                     invokeArgs.Error,
                                                                                     invokeArgs.Cancelled,
                                                                                     invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/LoadPublicProfile",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public User LoadPublicProfile(string loginName)
        {
            var results = Invoke("LoadPublicProfile", new object[]
                                                          {
                                                              loginName
                                                          });
            return ((User) (results[0]));
        }

        /// <remarks/>
        public void LoadPublicProfileAsync(string loginName)
        {
            LoadPublicProfileAsync(loginName, null);
        }

        /// <remarks/>
        public void LoadPublicProfileAsync(string loginName, object userState)
        {
            if ((LoadPublicProfileOperationCompleted == null))
            {
                LoadPublicProfileOperationCompleted = new SendOrPostCallback(OnLoadPublicProfileOperationCompleted);
            }
            InvokeAsync("LoadPublicProfile", new object[]
                                                 {
                                                     loginName
                                                 }, LoadPublicProfileOperationCompleted, userState);
        }

        private void OnLoadPublicProfileOperationCompleted(object arg)
        {
            if ((LoadPublicProfileCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                LoadPublicProfileCompleted(this,
                                           new LoadPublicProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                   invokeArgs.Cancelled,
                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/LoadGroupHierarchy",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public Group LoadGroupHierarchy(string loginName)
        {
            var results = Invoke("LoadGroupHierarchy", new object[]
                                                           {
                                                               loginName
                                                           });
            return ((Group) (results[0]));
        }

        /// <remarks/>
        public void LoadGroupHierarchyAsync(string loginName)
        {
            LoadGroupHierarchyAsync(loginName, null);
        }

        /// <remarks/>
        public void LoadGroupHierarchyAsync(string loginName, object userState)
        {
            if ((LoadGroupHierarchyOperationCompleted == null))
            {
                LoadGroupHierarchyOperationCompleted = new SendOrPostCallback(OnLoadGroupHierarchyOperationCompleted);
            }
            InvokeAsync("LoadGroupHierarchy", new object[]
                                                  {
                                                      loginName
                                                  }, LoadGroupHierarchyOperationCompleted, userState);
        }

        private void OnLoadGroupHierarchyOperationCompleted(object arg)
        {
            if ((LoadGroupHierarchyCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                LoadGroupHierarchyCompleted(this,
                                            new LoadGroupHierarchyCompletedEventArgs(invokeArgs.Results,
                                                                                     invokeArgs.Error,
                                                                                     invokeArgs.Cancelled,
                                                                                     invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/LoadGroup",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public Group LoadGroup(int groupId)
        {
            var results = Invoke("LoadGroup", new object[]
                                                  {
                                                      groupId
                                                  });
            return ((Group) (results[0]));
        }

        /// <remarks/>
        public void LoadGroupAsync(int groupId)
        {
            LoadGroupAsync(groupId, null);
        }

        /// <remarks/>
        public void LoadGroupAsync(int groupId, object userState)
        {
            if ((LoadGroupOperationCompleted == null))
            {
                LoadGroupOperationCompleted = new SendOrPostCallback(OnLoadGroupOperationCompleted);
            }
            InvokeAsync("LoadGroup", new object[]
                                         {
                                             groupId
                                         }, LoadGroupOperationCompleted, userState);
        }

        private void OnLoadGroupOperationCompleted(object arg)
        {
            if ((LoadGroupCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                LoadGroupCompleted(this,
                                   new LoadGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                   invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/LoadPhotoSet",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public PhotoSet LoadPhotoSet(int photosetId)
        {
            var results = Invoke("LoadPhotoSet", new object[]
                                                     {
                                                         photosetId
                                                     });
            return ((PhotoSet) (results[0]));
        }

        /// <remarks/>
        public void LoadPhotoSetAsync(int photosetId)
        {
            LoadPhotoSetAsync(photosetId, null);
        }

        /// <remarks/>
        public void LoadPhotoSetAsync(int photosetId, object userState)
        {
            if ((LoadPhotoSetOperationCompleted == null))
            {
                LoadPhotoSetOperationCompleted = new SendOrPostCallback(OnLoadPhotoSetOperationCompleted);
            }
            InvokeAsync("LoadPhotoSet", new object[]
                                            {
                                                photosetId
                                            }, LoadPhotoSetOperationCompleted, userState);
        }

        private void OnLoadPhotoSetOperationCompleted(object arg)
        {
            if ((LoadPhotoSetCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                LoadPhotoSetCompleted(this,
                                      new LoadPhotoSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                         invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/LoadPhoto",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public Photo LoadPhoto(int photoId)
        {
            var results = Invoke("LoadPhoto", new object[]
                                                  {
                                                      photoId
                                                  });
            return ((Photo) (results[0]));
        }

        /// <remarks/>
        public void LoadPhotoAsync(int photoId)
        {
            LoadPhotoAsync(photoId, null);
        }

        /// <remarks/>
        public void LoadPhotoAsync(int photoId, object userState)
        {
            if ((LoadPhotoOperationCompleted == null))
            {
                LoadPhotoOperationCompleted = new SendOrPostCallback(OnLoadPhotoOperationCompleted);
            }
            InvokeAsync("LoadPhoto", new object[]
                                         {
                                             photoId
                                         }, LoadPhotoOperationCompleted, userState);
        }

        private void OnLoadPhotoOperationCompleted(object arg)
        {
            if ((LoadPhotoCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                LoadPhotoCompleted(this,
                                   new LoadPhotoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                   invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/KeyringAddKeyPlain",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public string KeyringAddKeyPlain(string keyring, int realmId, string password)
        {
            var results = Invoke("KeyringAddKeyPlain", new object[]
                                                           {
                                                               keyring,
                                                               realmId,
                                                               password
                                                           });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void KeyringAddKeyPlainAsync(string keyring, int realmId, string password)
        {
            KeyringAddKeyPlainAsync(keyring, realmId, password, null);
        }

        /// <remarks/>
        public void KeyringAddKeyPlainAsync(string keyring, int realmId, string password, object userState)
        {
            if ((KeyringAddKeyPlainOperationCompleted == null))
            {
                KeyringAddKeyPlainOperationCompleted = new SendOrPostCallback(OnKeyringAddKeyPlainOperationCompleted);
            }
            InvokeAsync("KeyringAddKeyPlain", new object[]
                                                  {
                                                      keyring,
                                                      realmId,
                                                      password
                                                  }, KeyringAddKeyPlainOperationCompleted, userState);
        }

        private void OnKeyringAddKeyPlainOperationCompleted(object arg)
        {
            if ((KeyringAddKeyPlainCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                KeyringAddKeyPlainCompleted(this,
                                            new KeyringAddKeyPlainCompletedEventArgs(invokeArgs.Results,
                                                                                     invokeArgs.Error,
                                                                                     invokeArgs.Cancelled,
                                                                                     invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/GetCategories",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public Category[] GetCategories()
        {
            var results = Invoke("GetCategories", new object[0]);
            return ((Category[]) (results[0]));
        }

        /// <remarks/>
        public void GetCategoriesAsync()
        {
            GetCategoriesAsync(null);
        }

        /// <remarks/>
        public void GetCategoriesAsync(object userState)
        {
            if ((GetCategoriesOperationCompleted == null))
            {
                GetCategoriesOperationCompleted = new SendOrPostCallback(OnGetCategoriesOperationCompleted);
            }
            InvokeAsync("GetCategories", new object[0], GetCategoriesOperationCompleted, userState);
        }

        private void OnGetCategoriesOperationCompleted(object arg)
        {
            if ((GetCategoriesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetCategoriesCompleted(this,
                                       new GetCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                           invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/SearchSetByCategory",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public PhotoSetResult SearchSetByCategory(string searchId, PhotoSetType type, SortOrder sortOrder,
                                                  int categoryCode, int offset, int limit)
        {
            var results = Invoke("SearchSetByCategory", new object[]
                                                            {
                                                                searchId,
                                                                type,
                                                                sortOrder,
                                                                categoryCode,
                                                                offset,
                                                                limit
                                                            });
            return ((PhotoSetResult) (results[0]));
        }

        /// <remarks/>
        public void SearchSetByCategoryAsync(string searchId, PhotoSetType type, SortOrder sortOrder, int categoryCode,
                                             int offset, int limit)
        {
            SearchSetByCategoryAsync(searchId, type, sortOrder, categoryCode, offset, limit, null);
        }

        /// <remarks/>
        public void SearchSetByCategoryAsync(string searchId, PhotoSetType type, SortOrder sortOrder, int categoryCode,
                                             int offset, int limit, object userState)
        {
            if ((SearchSetByCategoryOperationCompleted == null))
            {
                SearchSetByCategoryOperationCompleted = new SendOrPostCallback(OnSearchSetByCategoryOperationCompleted);
            }
            InvokeAsync("SearchSetByCategory", new object[]
                                                   {
                                                       searchId,
                                                       type,
                                                       sortOrder,
                                                       categoryCode,
                                                       offset,
                                                       limit
                                                   }, SearchSetByCategoryOperationCompleted, userState);
        }

        private void OnSearchSetByCategoryOperationCompleted(object arg)
        {
            if ((SearchSetByCategoryCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SearchSetByCategoryCompleted(this,
                                             new SearchSetByCategoryCompletedEventArgs(invokeArgs.Results,
                                                                                       invokeArgs.Error,
                                                                                       invokeArgs.Cancelled,
                                                                                       invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/SearchSetByText",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public PhotoSetResult SearchSetByText(string searchId, PhotoSetType type, SortOrder sortOrder, string query,
                                              int offset, int limit)
        {
            var results = Invoke("SearchSetByText", new object[]
                                                        {
                                                            searchId,
                                                            type,
                                                            sortOrder,
                                                            query,
                                                            offset,
                                                            limit
                                                        });
            return ((PhotoSetResult) (results[0]));
        }

        /// <remarks/>
        public void SearchSetByTextAsync(string searchId, PhotoSetType type, SortOrder sortOrder, string query,
                                         int offset, int limit)
        {
            SearchSetByTextAsync(searchId, type, sortOrder, query, offset, limit, null);
        }

        /// <remarks/>
        public void SearchSetByTextAsync(string searchId, PhotoSetType type, SortOrder sortOrder, string query,
                                         int offset, int limit, object userState)
        {
            if ((SearchSetByTextOperationCompleted == null))
            {
                SearchSetByTextOperationCompleted = new SendOrPostCallback(OnSearchSetByTextOperationCompleted);
            }
            InvokeAsync("SearchSetByText", new object[]
                                               {
                                                   searchId,
                                                   type,
                                                   sortOrder,
                                                   query,
                                                   offset,
                                                   limit
                                               }, SearchSetByTextOperationCompleted, userState);
        }

        private void OnSearchSetByTextOperationCompleted(object arg)
        {
            if ((SearchSetByTextCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SearchSetByTextCompleted(this,
                                         new SearchSetByTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                               invokeArgs.Cancelled,
                                                                               invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/GetPopularSets",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public PhotoSet[] GetPopularSets(PhotoSetType type, int offset, int limit)
        {
            var results = Invoke("GetPopularSets", new object[]
                                                       {
                                                           type,
                                                           offset,
                                                           limit
                                                       });
            return ((PhotoSet[]) (results[0]));
        }

        /// <remarks/>
        public void GetPopularSetsAsync(PhotoSetType type, int offset, int limit)
        {
            GetPopularSetsAsync(type, offset, limit, null);
        }

        /// <remarks/>
        public void GetPopularSetsAsync(PhotoSetType type, int offset, int limit, object userState)
        {
            if ((GetPopularSetsOperationCompleted == null))
            {
                GetPopularSetsOperationCompleted = new SendOrPostCallback(OnGetPopularSetsOperationCompleted);
            }
            InvokeAsync("GetPopularSets", new object[]
                                              {
                                                  type,
                                                  offset,
                                                  limit
                                              }, GetPopularSetsOperationCompleted, userState);
        }

        private void OnGetPopularSetsOperationCompleted(object arg)
        {
            if ((GetPopularSetsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetPopularSetsCompleted(this,
                                        new GetPopularSetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                             invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/GetRecentSets",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public PhotoSet[] GetRecentSets(PhotoSetType type, int offset, int limit)
        {
            var results = Invoke("GetRecentSets", new object[]
                                                      {
                                                          type,
                                                          offset,
                                                          limit
                                                      });
            return ((PhotoSet[]) (results[0]));
        }

        /// <remarks/>
        public void GetRecentSetsAsync(PhotoSetType type, int offset, int limit)
        {
            GetRecentSetsAsync(type, offset, limit, null);
        }

        /// <remarks/>
        public void GetRecentSetsAsync(PhotoSetType type, int offset, int limit, object userState)
        {
            if ((GetRecentSetsOperationCompleted == null))
            {
                GetRecentSetsOperationCompleted = new SendOrPostCallback(OnGetRecentSetsOperationCompleted);
            }
            InvokeAsync("GetRecentSets", new object[]
                                             {
                                                 type,
                                                 offset,
                                                 limit
                                             }, GetRecentSetsOperationCompleted, userState);
        }

        private void OnGetRecentSetsOperationCompleted(object arg)
        {
            if ((GetRecentSetsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetRecentSetsCompleted(this,
                                       new GetRecentSetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                           invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/SearchPhotoByCategory",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public PhotoResult SearchPhotoByCategory(string searchId, SortOrder sortOrder, int categoryCode, int offset,
                                                 int limit)
        {
            var results = Invoke("SearchPhotoByCategory", new object[]
                                                              {
                                                                  searchId,
                                                                  sortOrder,
                                                                  categoryCode,
                                                                  offset,
                                                                  limit
                                                              });
            return ((PhotoResult) (results[0]));
        }

        /// <remarks/>
        public void SearchPhotoByCategoryAsync(string searchId, SortOrder sortOrder, int categoryCode, int offset,
                                               int limit)
        {
            SearchPhotoByCategoryAsync(searchId, sortOrder, categoryCode, offset, limit, null);
        }

        /// <remarks/>
        public void SearchPhotoByCategoryAsync(string searchId, SortOrder sortOrder, int categoryCode, int offset,
                                               int limit, object userState)
        {
            if ((SearchPhotoByCategoryOperationCompleted == null))
            {
                SearchPhotoByCategoryOperationCompleted =
                    new SendOrPostCallback(OnSearchPhotoByCategoryOperationCompleted);
            }
            InvokeAsync("SearchPhotoByCategory", new object[]
                                                     {
                                                         searchId,
                                                         sortOrder,
                                                         categoryCode,
                                                         offset,
                                                         limit
                                                     }, SearchPhotoByCategoryOperationCompleted, userState);
        }

        private void OnSearchPhotoByCategoryOperationCompleted(object arg)
        {
            if ((SearchPhotoByCategoryCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SearchPhotoByCategoryCompleted(this,
                                               new SearchPhotoByCategoryCompletedEventArgs(invokeArgs.Results,
                                                                                           invokeArgs.Error,
                                                                                           invokeArgs.Cancelled,
                                                                                           invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/SearchPhotoByText",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public PhotoResult SearchPhotoByText(string searchId, SortOrder sortOrder, string query, int offset, int limit)
        {
            var results = Invoke("SearchPhotoByText", new object[]
                                                          {
                                                              searchId,
                                                              sortOrder,
                                                              query,
                                                              offset,
                                                              limit
                                                          });
            return ((PhotoResult) (results[0]));
        }

        /// <remarks/>
        public void SearchPhotoByTextAsync(string searchId, SortOrder sortOrder, string query, int offset, int limit)
        {
            SearchPhotoByTextAsync(searchId, sortOrder, query, offset, limit, null);
        }

        /// <remarks/>
        public void SearchPhotoByTextAsync(string searchId, SortOrder sortOrder, string query, int offset, int limit,
                                           object userState)
        {
            if ((SearchPhotoByTextOperationCompleted == null))
            {
                SearchPhotoByTextOperationCompleted = new SendOrPostCallback(OnSearchPhotoByTextOperationCompleted);
            }
            InvokeAsync("SearchPhotoByText", new object[]
                                                 {
                                                     searchId,
                                                     sortOrder,
                                                     query,
                                                     offset,
                                                     limit
                                                 }, SearchPhotoByTextOperationCompleted, userState);
        }

        private void OnSearchPhotoByTextOperationCompleted(object arg)
        {
            if ((SearchPhotoByTextCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SearchPhotoByTextCompleted(this,
                                           new SearchPhotoByTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                   invokeArgs.Cancelled,
                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/GetPopularPhotos",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public Photo[] GetPopularPhotos(int offset, int limit)
        {
            var results = Invoke("GetPopularPhotos", new object[]
                                                         {
                                                             offset,
                                                             limit
                                                         });
            return ((Photo[]) (results[0]));
        }

        /// <remarks/>
        public void GetPopularPhotosAsync(int offset, int limit)
        {
            GetPopularPhotosAsync(offset, limit, null);
        }

        /// <remarks/>
        public void GetPopularPhotosAsync(int offset, int limit, object userState)
        {
            if ((GetPopularPhotosOperationCompleted == null))
            {
                GetPopularPhotosOperationCompleted = new SendOrPostCallback(OnGetPopularPhotosOperationCompleted);
            }
            InvokeAsync("GetPopularPhotos", new object[]
                                                {
                                                    offset,
                                                    limit
                                                }, GetPopularPhotosOperationCompleted, userState);
        }

        private void OnGetPopularPhotosOperationCompleted(object arg)
        {
            if ((GetPopularPhotosCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetPopularPhotosCompleted(this,
                                          new GetPopularPhotosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                 invokeArgs.Cancelled,
                                                                                 invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/GetRecentPhotos",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public Photo[] GetRecentPhotos(int offset, int limit)
        {
            var results = Invoke("GetRecentPhotos", new object[]
                                                        {
                                                            offset,
                                                            limit
                                                        });
            return ((Photo[]) (results[0]));
        }

        /// <remarks/>
        public void GetRecentPhotosAsync(int offset, int limit)
        {
            GetRecentPhotosAsync(offset, limit, null);
        }

        /// <remarks/>
        public void GetRecentPhotosAsync(int offset, int limit, object userState)
        {
            if ((GetRecentPhotosOperationCompleted == null))
            {
                GetRecentPhotosOperationCompleted = new SendOrPostCallback(OnGetRecentPhotosOperationCompleted);
            }
            InvokeAsync("GetRecentPhotos", new object[]
                                               {
                                                   offset,
                                                   limit
                                               }, GetRecentPhotosOperationCompleted, userState);
        }

        private void OnGetRecentPhotosOperationCompleted(object arg)
        {
            if ((GetRecentPhotosCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetRecentPhotosCompleted(this,
                                         new GetRecentPhotosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                               invokeArgs.Cancelled,
                                                                               invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/CreateGroup",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public Group CreateGroup(int parentId, GroupUpdater updater)
        {
            var results = Invoke("CreateGroup", new object[]
                                                    {
                                                        parentId,
                                                        updater
                                                    });
            return ((Group) (results[0]));
        }

        /// <remarks/>
        public void CreateGroupAsync(int parentId, GroupUpdater updater)
        {
            CreateGroupAsync(parentId, updater, null);
        }

        /// <remarks/>
        public void CreateGroupAsync(int parentId, GroupUpdater updater, object userState)
        {
            if ((CreateGroupOperationCompleted == null))
            {
                CreateGroupOperationCompleted = new SendOrPostCallback(OnCreateGroupOperationCompleted);
            }
            InvokeAsync("CreateGroup", new object[]
                                           {
                                               parentId,
                                               updater
                                           }, CreateGroupOperationCompleted, userState);
        }

        private void OnCreateGroupOperationCompleted(object arg)
        {
            if ((CreateGroupCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CreateGroupCompleted(this,
                                     new CreateGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                       invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/DeleteGroup",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void DeleteGroup(int groupId)
        {
            Invoke("DeleteGroup", new object[]
                                      {
                                          groupId
                                      });
        }

        /// <remarks/>
        public void DeleteGroupAsync(int groupId)
        {
            DeleteGroupAsync(groupId, null);
        }

        /// <remarks/>
        public void DeleteGroupAsync(int groupId, object userState)
        {
            if ((DeleteGroupOperationCompleted == null))
            {
                DeleteGroupOperationCompleted = new SendOrPostCallback(OnDeleteGroupOperationCompleted);
            }
            InvokeAsync("DeleteGroup", new object[]
                                           {
                                               groupId
                                           }, DeleteGroupOperationCompleted, userState);
        }

        private void OnDeleteGroupOperationCompleted(object arg)
        {
            if ((DeleteGroupCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                DeleteGroupCompleted(this,
                                     new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                 invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/UpdateGroup",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public Group UpdateGroup(int groupId, GroupUpdater updater)
        {
            var results = Invoke("UpdateGroup", new object[]
                                                    {
                                                        groupId,
                                                        updater
                                                    });
            return ((Group) (results[0]));
        }

        /// <remarks/>
        public void UpdateGroupAsync(int groupId, GroupUpdater updater)
        {
            UpdateGroupAsync(groupId, updater, null);
        }

        /// <remarks/>
        public void UpdateGroupAsync(int groupId, GroupUpdater updater, object userState)
        {
            if ((UpdateGroupOperationCompleted == null))
            {
                UpdateGroupOperationCompleted = new SendOrPostCallback(OnUpdateGroupOperationCompleted);
            }
            InvokeAsync("UpdateGroup", new object[]
                                           {
                                               groupId,
                                               updater
                                           }, UpdateGroupOperationCompleted, userState);
        }

        private void OnUpdateGroupOperationCompleted(object arg)
        {
            if ((UpdateGroupCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                UpdateGroupCompleted(this,
                                     new UpdateGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                       invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/CreatePhotoSet",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public PhotoSet CreatePhotoSet(int groupId, PhotoSetType type, PhotoSetUpdater updater)
        {
            var results = Invoke("CreatePhotoSet", new object[]
                                                       {
                                                           groupId,
                                                           type,
                                                           updater
                                                       });
            return ((PhotoSet) (results[0]));
        }

        /// <remarks/>
        public void CreatePhotoSetAsync(int groupId, PhotoSetType type, PhotoSetUpdater updater)
        {
            CreatePhotoSetAsync(groupId, type, updater, null);
        }

        /// <remarks/>
        public void CreatePhotoSetAsync(int groupId, PhotoSetType type, PhotoSetUpdater updater, object userState)
        {
            if ((CreatePhotoSetOperationCompleted == null))
            {
                CreatePhotoSetOperationCompleted = new SendOrPostCallback(OnCreatePhotoSetOperationCompleted);
            }
            InvokeAsync("CreatePhotoSet", new object[]
                                              {
                                                  groupId,
                                                  type,
                                                  updater
                                              }, CreatePhotoSetOperationCompleted, userState);
        }

        private void OnCreatePhotoSetOperationCompleted(object arg)
        {
            if ((CreatePhotoSetCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CreatePhotoSetCompleted(this,
                                        new CreatePhotoSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                             invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/DeletePhotoSet",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void DeletePhotoSet(int photoSetId)
        {
            Invoke("DeletePhotoSet", new object[]
                                         {
                                             photoSetId
                                         });
        }

        /// <remarks/>
        public void DeletePhotoSetAsync(int photoSetId)
        {
            DeletePhotoSetAsync(photoSetId, null);
        }

        /// <remarks/>
        public void DeletePhotoSetAsync(int photoSetId, object userState)
        {
            if ((DeletePhotoSetOperationCompleted == null))
            {
                DeletePhotoSetOperationCompleted = new SendOrPostCallback(OnDeletePhotoSetOperationCompleted);
            }
            InvokeAsync("DeletePhotoSet", new object[]
                                              {
                                                  photoSetId
                                              }, DeletePhotoSetOperationCompleted, userState);
        }

        private void OnDeletePhotoSetOperationCompleted(object arg)
        {
            if ((DeletePhotoSetCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                DeletePhotoSetCompleted(this,
                                        new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                    invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/UpdatePhotoSet",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public PhotoSet UpdatePhotoSet(int photoSetId, PhotoSetUpdater updater)
        {
            var results = Invoke("UpdatePhotoSet", new object[]
                                                       {
                                                           photoSetId,
                                                           updater
                                                       });
            return ((PhotoSet) (results[0]));
        }

        /// <remarks/>
        public void UpdatePhotoSetAsync(int photoSetId, PhotoSetUpdater updater)
        {
            UpdatePhotoSetAsync(photoSetId, updater, null);
        }

        /// <remarks/>
        public void UpdatePhotoSetAsync(int photoSetId, PhotoSetUpdater updater, object userState)
        {
            if ((UpdatePhotoSetOperationCompleted == null))
            {
                UpdatePhotoSetOperationCompleted = new SendOrPostCallback(OnUpdatePhotoSetOperationCompleted);
            }
            InvokeAsync("UpdatePhotoSet", new object[]
                                              {
                                                  photoSetId,
                                                  updater
                                              }, UpdatePhotoSetOperationCompleted, userState);
        }

        private void OnUpdatePhotoSetOperationCompleted(object arg)
        {
            if ((UpdatePhotoSetCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                UpdatePhotoSetCompleted(this,
                                        new UpdatePhotoSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                             invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/DeletePhoto",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void DeletePhoto(int photoId)
        {
            Invoke("DeletePhoto", new object[]
                                      {
                                          photoId
                                      });
        }

        /// <remarks/>
        public void DeletePhotoAsync(int photoId)
        {
            DeletePhotoAsync(photoId, null);
        }

        /// <remarks/>
        public void DeletePhotoAsync(int photoId, object userState)
        {
            if ((DeletePhotoOperationCompleted == null))
            {
                DeletePhotoOperationCompleted = new SendOrPostCallback(OnDeletePhotoOperationCompleted);
            }
            InvokeAsync("DeletePhoto", new object[]
                                           {
                                               photoId
                                           }, DeletePhotoOperationCompleted, userState);
        }

        private void OnDeletePhotoOperationCompleted(object arg)
        {
            if ((DeletePhotoCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                DeletePhotoCompleted(this,
                                     new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                 invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/UpdatePhoto",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public Photo UpdatePhoto(int photoId, PhotoUpdater updater)
        {
            var results = Invoke("UpdatePhoto", new object[]
                                                    {
                                                        photoId,
                                                        updater
                                                    });
            return ((Photo) (results[0]));
        }

        /// <remarks/>
        public void UpdatePhotoAsync(int photoId, PhotoUpdater updater)
        {
            UpdatePhotoAsync(photoId, updater, null);
        }

        /// <remarks/>
        public void UpdatePhotoAsync(int photoId, PhotoUpdater updater, object userState)
        {
            if ((UpdatePhotoOperationCompleted == null))
            {
                UpdatePhotoOperationCompleted = new SendOrPostCallback(OnUpdatePhotoOperationCompleted);
            }
            InvokeAsync("UpdatePhoto", new object[]
                                           {
                                               photoId,
                                               updater
                                           }, UpdatePhotoOperationCompleted, userState);
        }

        private void OnUpdatePhotoOperationCompleted(object arg)
        {
            if ((UpdatePhotoCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                UpdatePhotoCompleted(this,
                                     new UpdatePhotoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                       invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/CollectionAddPhoto",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void CollectionAddPhoto(int collectionId, int photoId)
        {
            Invoke("CollectionAddPhoto", new object[]
                                             {
                                                 collectionId,
                                                 photoId
                                             });
        }

        /// <remarks/>
        public void CollectionAddPhotoAsync(int collectionId, int photoId)
        {
            CollectionAddPhotoAsync(collectionId, photoId, null);
        }

        /// <remarks/>
        public void CollectionAddPhotoAsync(int collectionId, int photoId, object userState)
        {
            if ((CollectionAddPhotoOperationCompleted == null))
            {
                CollectionAddPhotoOperationCompleted = new SendOrPostCallback(OnCollectionAddPhotoOperationCompleted);
            }
            InvokeAsync("CollectionAddPhoto", new object[]
                                                  {
                                                      collectionId,
                                                      photoId
                                                  }, CollectionAddPhotoOperationCompleted, userState);
        }

        private void OnCollectionAddPhotoOperationCompleted(object arg)
        {
            if ((CollectionAddPhotoCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CollectionAddPhotoCompleted(this,
                                            new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                        invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/CollectionRemovePhoto",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void CollectionRemovePhoto(int collectionId, int photoId)
        {
            Invoke("CollectionRemovePhoto", new object[]
                                                {
                                                    collectionId,
                                                    photoId
                                                });
        }

        /// <remarks/>
        public void CollectionRemovePhotoAsync(int collectionId, int photoId)
        {
            CollectionRemovePhotoAsync(collectionId, photoId, null);
        }

        /// <remarks/>
        public void CollectionRemovePhotoAsync(int collectionId, int photoId, object userState)
        {
            if ((CollectionRemovePhotoOperationCompleted == null))
            {
                CollectionRemovePhotoOperationCompleted =
                    new SendOrPostCallback(OnCollectionRemovePhotoOperationCompleted);
            }
            InvokeAsync("CollectionRemovePhoto", new object[]
                                                     {
                                                         collectionId,
                                                         photoId
                                                     }, CollectionRemovePhotoOperationCompleted, userState);
        }

        private void OnCollectionRemovePhotoOperationCompleted(object arg)
        {
            if ((CollectionRemovePhotoCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CollectionRemovePhotoCompleted(this,
                                               new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                           invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/UpdatePhotoAccess",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public int UpdatePhotoAccess(int photoId, AccessUpdater updater)
        {
            var results = Invoke("UpdatePhotoAccess", new object[]
                                                          {
                                                              photoId,
                                                              updater
                                                          });
            return ((int) (results[0]));
        }

        /// <remarks/>
        public void UpdatePhotoAccessAsync(int photoId, AccessUpdater updater)
        {
            UpdatePhotoAccessAsync(photoId, updater, null);
        }

        /// <remarks/>
        public void UpdatePhotoAccessAsync(int photoId, AccessUpdater updater, object userState)
        {
            if ((UpdatePhotoAccessOperationCompleted == null))
            {
                UpdatePhotoAccessOperationCompleted = new SendOrPostCallback(OnUpdatePhotoAccessOperationCompleted);
            }
            InvokeAsync("UpdatePhotoAccess", new object[]
                                                 {
                                                     photoId,
                                                     updater
                                                 }, UpdatePhotoAccessOperationCompleted, userState);
        }

        private void OnUpdatePhotoAccessOperationCompleted(object arg)
        {
            if ((UpdatePhotoAccessCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                UpdatePhotoAccessCompleted(this,
                                           new UpdatePhotoAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                   invokeArgs.Cancelled,
                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/UpdatePhotoSetAccess",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public int UpdatePhotoSetAccess(int photoSetId, AccessUpdater updater)
        {
            var results = Invoke("UpdatePhotoSetAccess", new object[]
                                                             {
                                                                 photoSetId,
                                                                 updater
                                                             });
            return ((int) (results[0]));
        }

        /// <remarks/>
        public void UpdatePhotoSetAccessAsync(int photoSetId, AccessUpdater updater)
        {
            UpdatePhotoSetAccessAsync(photoSetId, updater, null);
        }

        /// <remarks/>
        public void UpdatePhotoSetAccessAsync(int photoSetId, AccessUpdater updater, object userState)
        {
            if ((UpdatePhotoSetAccessOperationCompleted == null))
            {
                UpdatePhotoSetAccessOperationCompleted = new SendOrPostCallback(OnUpdatePhotoSetAccessOperationCompleted);
            }
            InvokeAsync("UpdatePhotoSetAccess", new object[]
                                                    {
                                                        photoSetId,
                                                        updater
                                                    }, UpdatePhotoSetAccessOperationCompleted, userState);
        }

        private void OnUpdatePhotoSetAccessOperationCompleted(object arg)
        {
            if ((UpdatePhotoSetAccessCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                UpdatePhotoSetAccessCompleted(this,
                                              new UpdatePhotoSetAccessCompletedEventArgs(invokeArgs.Results,
                                                                                         invokeArgs.Error,
                                                                                         invokeArgs.Cancelled,
                                                                                         invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/UpdateGroupAccess",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public int UpdateGroupAccess(int groupId, AccessUpdater updater)
        {
            var results = Invoke("UpdateGroupAccess", new object[]
                                                          {
                                                              groupId,
                                                              updater
                                                          });
            return ((int) (results[0]));
        }

        /// <remarks/>
        public void UpdateGroupAccessAsync(int groupId, AccessUpdater updater)
        {
            UpdateGroupAccessAsync(groupId, updater, null);
        }

        /// <remarks/>
        public void UpdateGroupAccessAsync(int groupId, AccessUpdater updater, object userState)
        {
            if ((UpdateGroupAccessOperationCompleted == null))
            {
                UpdateGroupAccessOperationCompleted = new SendOrPostCallback(OnUpdateGroupAccessOperationCompleted);
            }
            InvokeAsync("UpdateGroupAccess", new object[]
                                                 {
                                                     groupId,
                                                     updater
                                                 }, UpdateGroupAccessOperationCompleted, userState);
        }

        private void OnUpdateGroupAccessOperationCompleted(object arg)
        {
            if ((UpdateGroupAccessCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                UpdateGroupAccessCompleted(this,
                                           new UpdateGroupAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                   invokeArgs.Cancelled,
                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/ReorderPhotoSet",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void ReorderPhotoSet(int photoSetId, ShiftOrder shiftOrder)
        {
            Invoke("ReorderPhotoSet", new object[]
                                          {
                                              photoSetId,
                                              shiftOrder
                                          });
        }

        /// <remarks/>
        public void ReorderPhotoSetAsync(int photoSetId, ShiftOrder shiftOrder)
        {
            ReorderPhotoSetAsync(photoSetId, shiftOrder, null);
        }

        /// <remarks/>
        public void ReorderPhotoSetAsync(int photoSetId, ShiftOrder shiftOrder, object userState)
        {
            if ((ReorderPhotoSetOperationCompleted == null))
            {
                ReorderPhotoSetOperationCompleted = new SendOrPostCallback(OnReorderPhotoSetOperationCompleted);
            }
            InvokeAsync("ReorderPhotoSet", new object[]
                                               {
                                                   photoSetId,
                                                   shiftOrder
                                               }, ReorderPhotoSetOperationCompleted, userState);
        }

        private void OnReorderPhotoSetOperationCompleted(object arg)
        {
            if ((ReorderPhotoSetCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ReorderPhotoSetCompleted(this,
                                         new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                     invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/MovePhoto",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void MovePhoto(int srcSetId, int photoId, int destSetId, int index)
        {
            Invoke("MovePhoto", new object[]
                                    {
                                        srcSetId,
                                        photoId,
                                        destSetId,
                                        index
                                    });
        }

        /// <remarks/>
        public void MovePhotoAsync(int srcSetId, int photoId, int destSetId, int index)
        {
            MovePhotoAsync(srcSetId, photoId, destSetId, index, null);
        }

        /// <remarks/>
        public void MovePhotoAsync(int srcSetId, int photoId, int destSetId, int index, object userState)
        {
            if ((MovePhotoOperationCompleted == null))
            {
                MovePhotoOperationCompleted = new SendOrPostCallback(OnMovePhotoOperationCompleted);
            }
            InvokeAsync("MovePhoto", new object[]
                                         {
                                             srcSetId,
                                             photoId,
                                             destSetId,
                                             index
                                         }, MovePhotoOperationCompleted, userState);
        }

        private void OnMovePhotoOperationCompleted(object arg)
        {
            if ((MovePhotoCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                MovePhotoCompleted(this,
                                   new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                               invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/RotatePhoto",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public Photo RotatePhoto(int photoId, PhotoRotation rotation)
        {
            var results = Invoke("RotatePhoto", new object[]
                                                    {
                                                        photoId,
                                                        rotation
                                                    });
            return ((Photo) (results[0]));
        }

        /// <remarks/>
        public void RotatePhotoAsync(int photoId, PhotoRotation rotation)
        {
            RotatePhotoAsync(photoId, rotation, null);
        }

        /// <remarks/>
        public void RotatePhotoAsync(int photoId, PhotoRotation rotation, object userState)
        {
            if ((RotatePhotoOperationCompleted == null))
            {
                RotatePhotoOperationCompleted = new SendOrPostCallback(OnRotatePhotoOperationCompleted);
            }
            InvokeAsync("RotatePhoto", new object[]
                                           {
                                               photoId,
                                               rotation
                                           }, RotatePhotoOperationCompleted, userState);
        }

        private void OnRotatePhotoOperationCompleted(object arg)
        {
            if ((RotatePhotoCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                RotatePhotoCompleted(this,
                                     new RotatePhotoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                       invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/SetGroupTitlePhoto",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetGroupTitlePhoto(int groupId, int photoId)
        {
            Invoke("SetGroupTitlePhoto", new object[]
                                             {
                                                 groupId,
                                                 photoId
                                             });
        }

        /// <remarks/>
        public void SetGroupTitlePhotoAsync(int groupId, int photoId)
        {
            SetGroupTitlePhotoAsync(groupId, photoId, null);
        }

        /// <remarks/>
        public void SetGroupTitlePhotoAsync(int groupId, int photoId, object userState)
        {
            if ((SetGroupTitlePhotoOperationCompleted == null))
            {
                SetGroupTitlePhotoOperationCompleted = new SendOrPostCallback(OnSetGroupTitlePhotoOperationCompleted);
            }
            InvokeAsync("SetGroupTitlePhoto", new object[]
                                                  {
                                                      groupId,
                                                      photoId
                                                  }, SetGroupTitlePhotoOperationCompleted, userState);
        }

        private void OnSetGroupTitlePhotoOperationCompleted(object arg)
        {
            if ((SetGroupTitlePhotoCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetGroupTitlePhotoCompleted(this,
                                            new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                        invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/SetPhotoSetTitlePhoto",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetPhotoSetTitlePhoto(int photoSetId, int photoId)
        {
            Invoke("SetPhotoSetTitlePhoto", new object[]
                                                {
                                                    photoSetId,
                                                    photoId
                                                });
        }

        /// <remarks/>
        public void SetPhotoSetTitlePhotoAsync(int photoSetId, int photoId)
        {
            SetPhotoSetTitlePhotoAsync(photoSetId, photoId, null);
        }

        /// <remarks/>
        public void SetPhotoSetTitlePhotoAsync(int photoSetId, int photoId, object userState)
        {
            if ((SetPhotoSetTitlePhotoOperationCompleted == null))
            {
                SetPhotoSetTitlePhotoOperationCompleted =
                    new SendOrPostCallback(OnSetPhotoSetTitlePhotoOperationCompleted);
            }
            InvokeAsync("SetPhotoSetTitlePhoto", new object[]
                                                     {
                                                         photoSetId,
                                                         photoId
                                                     }, SetPhotoSetTitlePhotoOperationCompleted, userState);
        }

        private void OnSetPhotoSetTitlePhotoOperationCompleted(object arg)
        {
            if ((SetPhotoSetTitlePhotoCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetPhotoSetTitlePhotoCompleted(this,
                                               new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                           invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/SetPhotoSetFeaturedIndex",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void SetPhotoSetFeaturedIndex(int photoSetId, int index)
        {
            Invoke("SetPhotoSetFeaturedIndex", new object[]
                                                   {
                                                       photoSetId,
                                                       index
                                                   });
        }

        /// <remarks/>
        public void SetPhotoSetFeaturedIndexAsync(int photoSetId, int index)
        {
            SetPhotoSetFeaturedIndexAsync(photoSetId, index, null);
        }

        /// <remarks/>
        public void SetPhotoSetFeaturedIndexAsync(int photoSetId, int index, object userState)
        {
            if ((SetPhotoSetFeaturedIndexOperationCompleted == null))
            {
                SetPhotoSetFeaturedIndexOperationCompleted =
                    new SendOrPostCallback(OnSetPhotoSetFeaturedIndexOperationCompleted);
            }
            InvokeAsync("SetPhotoSetFeaturedIndex", new object[]
                                                        {
                                                            photoSetId,
                                                            index
                                                        }, SetPhotoSetFeaturedIndexOperationCompleted, userState);
        }

        private void OnSetPhotoSetFeaturedIndexOperationCompleted(object arg)
        {
            if ((SetPhotoSetFeaturedIndexCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SetPhotoSetFeaturedIndexCompleted(this,
                                                  new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                              invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/MovePhotoSet",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void MovePhotoSet(int photoSetId, int destGroupId, int index)
        {
            Invoke("MovePhotoSet", new object[]
                                       {
                                           photoSetId,
                                           destGroupId,
                                           index
                                       });
        }

        /// <remarks/>
        public void MovePhotoSetAsync(int photoSetId, int destGroupId, int index)
        {
            MovePhotoSetAsync(photoSetId, destGroupId, index, null);
        }

        /// <remarks/>
        public void MovePhotoSetAsync(int photoSetId, int destGroupId, int index, object userState)
        {
            if ((MovePhotoSetOperationCompleted == null))
            {
                MovePhotoSetOperationCompleted = new SendOrPostCallback(OnMovePhotoSetOperationCompleted);
            }
            InvokeAsync("MovePhotoSet", new object[]
                                            {
                                                photoSetId,
                                                destGroupId,
                                                index
                                            }, MovePhotoSetOperationCompleted, userState);
        }

        private void OnMovePhotoSetOperationCompleted(object arg)
        {
            if ((MovePhotoSetCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                MovePhotoSetCompleted(this,
                                      new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                  invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/ReorderGroup",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void ReorderGroup(int groupId, GroupShiftOrder shiftOrder)
        {
            Invoke("ReorderGroup", new object[]
                                       {
                                           groupId,
                                           shiftOrder
                                       });
        }

        /// <remarks/>
        public void ReorderGroupAsync(int groupId, GroupShiftOrder shiftOrder)
        {
            ReorderGroupAsync(groupId, shiftOrder, null);
        }

        /// <remarks/>
        public void ReorderGroupAsync(int groupId, GroupShiftOrder shiftOrder, object userState)
        {
            if ((ReorderGroupOperationCompleted == null))
            {
                ReorderGroupOperationCompleted = new SendOrPostCallback(OnReorderGroupOperationCompleted);
            }
            InvokeAsync("ReorderGroup", new object[]
                                            {
                                                groupId,
                                                shiftOrder
                                            }, ReorderGroupOperationCompleted, userState);
        }

        private void OnReorderGroupOperationCompleted(object arg)
        {
            if ((ReorderGroupCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ReorderGroupCompleted(this,
                                      new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                  invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/ReplacePhoto",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void ReplacePhoto(int originalId, int replacedId)
        {
            Invoke("ReplacePhoto", new object[]
                                       {
                                           originalId,
                                           replacedId
                                       });
        }

        /// <remarks/>
        public void ReplacePhotoAsync(int originalId, int replacedId)
        {
            ReplacePhotoAsync(originalId, replacedId, null);
        }

        /// <remarks/>
        public void ReplacePhotoAsync(int originalId, int replacedId, object userState)
        {
            if ((ReplacePhotoOperationCompleted == null))
            {
                ReplacePhotoOperationCompleted = new SendOrPostCallback(OnReplacePhotoOperationCompleted);
            }
            InvokeAsync("ReplacePhoto", new object[]
                                            {
                                                originalId,
                                                replacedId
                                            }, ReplacePhotoOperationCompleted, userState);
        }

        private void OnReplacePhotoOperationCompleted(object arg)
        {
            if ((ReplacePhotoCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ReplacePhotoCompleted(this,
                                      new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                  invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("http://www.zenfolio.com/api/1.1/MoveGroup",
            RequestNamespace = "http://www.zenfolio.com/api/1.1", ResponseNamespace = "http://www.zenfolio.com/api/1.1",
            Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void MoveGroup(int groupId, int destGroupId, int index)
        {
            Invoke("MoveGroup", new object[]
                                    {
                                        groupId,
                                        destGroupId,
                                        index
                                    });
        }

        /// <remarks/>
        public void MoveGroupAsync(int groupId, int destGroupId, int index)
        {
            MoveGroupAsync(groupId, destGroupId, index, null);
        }

        /// <remarks/>
        public void MoveGroupAsync(int groupId, int destGroupId, int index, object userState)
        {
            if ((MoveGroupOperationCompleted == null))
            {
                MoveGroupOperationCompleted = new SendOrPostCallback(OnMoveGroupOperationCompleted);
            }
            InvokeAsync("MoveGroup", new object[]
                                         {
                                             groupId,
                                             destGroupId,
                                             index
                                         }, MoveGroupOperationCompleted, userState);
        }

        private void OnMoveGroupOperationCompleted(object arg)
        {
            if ((MoveGroupCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                MoveGroupCompleted(this,
                                   new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                               invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                 || (url == string.Empty)))
            {
                return false;
            }
            var wsUri = new Uri(url);
            if (((wsUri.Port >= 1024)
                 && (string.Compare(wsUri.Host, "localHost", StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public partial class AuthChallenge
    {
        private byte[] challengeField;
        private byte[] passwordSaltField;

        /// <remarks/>
        [XmlElement(DataType = "base64Binary")]
        public byte[] PasswordSalt
        {
            get { return passwordSaltField; }
            set { passwordSaltField = value; }
        }

        /// <remarks/>
        [XmlElement(DataType = "base64Binary")]
        public byte[] Challenge
        {
            get { return challengeField; }
            set { challengeField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public partial class AccessUpdater
    {
        private ApiAccessMask accessMaskField;

        private AccessType accessTypeField;

        private bool isDerivedField;
        private string passwordField;
        private string[] viewersField;

        /// <remarks/>
        public ApiAccessMask AccessMask
        {
            get { return accessMaskField; }
            set { accessMaskField = value; }
        }

        /// <remarks/>
        public string Password
        {
            get { return passwordField; }
            set { passwordField = value; }
        }

        /// <remarks/>
        public AccessType AccessType
        {
            get { return accessTypeField; }
            set { accessTypeField = value; }
        }

        /// <remarks/>
        [XmlArrayItem("Viewer", IsNullable = false)]
        public string[] Viewers
        {
            get { return viewersField; }
            set { viewersField = value; }
        }

        /// <remarks/>
        public bool IsDerived
        {
            get { return isDerivedField; }
            set { isDerivedField = value; }
        }
    }

    /// <remarks/>
    [Flags()]
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public enum ApiAccessMask
    {
        /// <remarks/>
        ProtectAll = 1,

        /// <remarks/>
        NoCollections = 2,

        /// <remarks/>
        None = 4,

        /// <remarks/>
        NoPrivateSearch = 8,

        /// <remarks/>
        NoPublicSearch = 16,

        /// <remarks/>
        NoRecentList = 32,

        /// <remarks/>
        HideDateCreated = 64,

        /// <remarks/>
        HideDateModified = 128,

        /// <remarks/>
        HideDateTaken = 256,

        /// <remarks/>
        ProtectExif = 512,

        /// <remarks/>
        ProtectExtraLarge = 1024,

        /// <remarks/>
        ProtectLarge = 2048,

        /// <remarks/>
        ProtectMedium = 4096,

        /// <remarks/>
        HideMetaData = 8192,

        /// <remarks/>
        ProtectOriginals = 16384,

        /// <remarks/>
        HideUserStats = 32768,

        /// <remarks/>
        HideVisits = 65536,

        /// <remarks/>
        NoPublicGuestbookPosts = 131072,

        /// <remarks/>
        NoPrivateGuestbookPosts = 262144,

        /// <remarks/>
        NoAnonymousGuestbookPosts = 524288,

        /// <remarks/>
        NoPublicComments = 1048576,

        /// <remarks/>
        NoPrivateComments = 2097152,

        /// <remarks/>
        NoAnonymousComments = 4194304,

        /// <remarks/>
        ProtectGuestbook = 8388608,

        /// <remarks/>
        ProtectComments = 16777216,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public enum AccessType
    {
        /// <remarks/>
        Private,

        /// <remarks/>
        UserList,

        /// <remarks/>
        Password,

        /// <remarks/>
        Public,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public partial class PhotoUpdater
    {
        private string captionField;

        private int[] categoriesField;

        private string copyrightField;

        private string fileNameField;
        private string[] keywordsField;
        private string titleField;

        /// <remarks/>
        public string Title
        {
            get { return titleField; }
            set { titleField = value; }
        }

        /// <remarks/>
        public string Caption
        {
            get { return captionField; }
            set { captionField = value; }
        }

        /// <remarks/>
        [XmlArrayItem("Keyword", IsNullable = false)]
        public string[] Keywords
        {
            get { return keywordsField; }
            set { keywordsField = value; }
        }

        /// <remarks/>
        [XmlArrayItem("Category", IsNullable = false)]
        public int[] Categories
        {
            get { return categoriesField; }
            set { categoriesField = value; }
        }

        /// <remarks/>
        public string Copyright
        {
            get { return copyrightField; }
            set { copyrightField = value; }
        }

        /// <remarks/>
        public string FileName
        {
            get { return fileNameField; }
            set { fileNameField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public partial class PhotoSetUpdater
    {
        private string captionField;

        private int[] categoriesField;

        private string customReferenceField;
        private string[] keywordsField;
        private string titleField;

        /// <remarks/>
        public string Title
        {
            get { return titleField; }
            set { titleField = value; }
        }

        /// <remarks/>
        public string Caption
        {
            get { return captionField; }
            set { captionField = value; }
        }

        /// <remarks/>
        [XmlArrayItem("Keyword", IsNullable = false)]
        public string[] Keywords
        {
            get { return keywordsField; }
            set { keywordsField = value; }
        }

        /// <remarks/>
        [XmlArrayItem("Category", IsNullable = false)]
        public int[] Categories
        {
            get { return categoriesField; }
            set { categoriesField = value; }
        }

        /// <remarks/>
        public string CustomReference
        {
            get { return customReferenceField; }
            set { customReferenceField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public partial class GroupUpdater
    {
        private string captionField;

        private string customReferenceField;
        private string titleField;

        /// <remarks/>
        public string Title
        {
            get { return titleField; }
            set { titleField = value; }
        }

        /// <remarks/>
        public string Caption
        {
            get { return captionField; }
            set { captionField = value; }
        }

        /// <remarks/>
        public string CustomReference
        {
            get { return customReferenceField; }
            set { customReferenceField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public partial class PhotoResult
    {
        private Photo[] photosField;

        private int totalCountField;

        /// <remarks/>
        [XmlArrayItem(IsNullable = false)]
        public Photo[] Photos
        {
            get { return photosField; }
            set { photosField = value; }
        }

        /// <remarks/>
        public int TotalCount
        {
            get { return totalCountField; }
            set { totalCountField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public partial class Photo
    {
        private AccessDescriptor accessDescriptorField;

        private string captionField;
        private int[] categoriesField;
        private string copyrightField;

        private byte[] fileHashField;

        private string fileNameField;

        private int galleryField;

        private bool galleryFieldSpecified;
        private uint heightField;

        private bool heightFieldSpecified;
        private int idField;

        private string[] keywordsField;

        private string mimeTypeField;

        private string originalUrlField;
        private string ownerField;

        private string pageUrlField;
        private long pricingKeyField;

        private bool pricingKeyFieldSpecified;
        private PhotoRotation rotationField;

        private bool rotationFieldSpecified;
        private string sequenceField;
        private int sizeField;

        private bool sizeFieldSpecified;
        private DateTime takenOnField;

        private bool takenOnFieldSpecified;
        private string titleField;
        private DateTime uploadedOnField;

        private bool uploadedOnFieldSpecified;
        private string urlCoreField;
        private int viewsField;

        private bool viewsFieldSpecified;
        private uint widthField;

        private bool widthFieldSpecified;

        /// <remarks/>
        public int Id
        {
            get { return idField; }
            set { idField = value; }
        }

        /// <remarks/>
        public uint Width
        {
            get { return widthField; }
            set { widthField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool WidthSpecified
        {
            get { return widthFieldSpecified; }
            set { widthFieldSpecified = value; }
        }

        /// <remarks/>
        public uint Height
        {
            get { return heightField; }
            set { heightField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool HeightSpecified
        {
            get { return heightFieldSpecified; }
            set { heightFieldSpecified = value; }
        }

        /// <remarks/>
        public string Sequence
        {
            get { return sequenceField; }
            set { sequenceField = value; }
        }

        /// <remarks/>
        public AccessDescriptor AccessDescriptor
        {
            get { return accessDescriptorField; }
            set { accessDescriptorField = value; }
        }

        /// <remarks/>
        public string Title
        {
            get { return titleField; }
            set { titleField = value; }
        }

        /// <remarks/>
        public string Caption
        {
            get { return captionField; }
            set { captionField = value; }
        }

        /// <remarks/>
        public string FileName
        {
            get { return fileNameField; }
            set { fileNameField = value; }
        }

        /// <remarks/>
        public DateTime UploadedOn
        {
            get { return uploadedOnField; }
            set { uploadedOnField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool UploadedOnSpecified
        {
            get { return uploadedOnFieldSpecified; }
            set { uploadedOnFieldSpecified = value; }
        }

        /// <remarks/>
        public DateTime TakenOn
        {
            get { return takenOnField; }
            set { takenOnField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool TakenOnSpecified
        {
            get { return takenOnFieldSpecified; }
            set { takenOnFieldSpecified = value; }
        }

        /// <remarks/>
        public string Owner
        {
            get { return ownerField; }
            set { ownerField = value; }
        }

        /// <remarks/>
        public int Gallery
        {
            get { return galleryField; }
            set { galleryField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool GallerySpecified
        {
            get { return galleryFieldSpecified; }
            set { galleryFieldSpecified = value; }
        }

        /// <remarks/>
        public int Views
        {
            get { return viewsField; }
            set { viewsField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool ViewsSpecified
        {
            get { return viewsFieldSpecified; }
            set { viewsFieldSpecified = value; }
        }

        /// <remarks/>
        public int Size
        {
            get { return sizeField; }
            set { sizeField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool SizeSpecified
        {
            get { return sizeFieldSpecified; }
            set { sizeFieldSpecified = value; }
        }

        /// <remarks/>
        public PhotoRotation Rotation
        {
            get { return rotationField; }
            set { rotationField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool RotationSpecified
        {
            get { return rotationFieldSpecified; }
            set { rotationFieldSpecified = value; }
        }

        /// <remarks/>
        [XmlArrayItem("Keyword", IsNullable = false)]
        public string[] Keywords
        {
            get { return keywordsField; }
            set { keywordsField = value; }
        }

        /// <remarks/>
        [XmlArrayItem("Category", IsNullable = false)]
        public int[] Categories
        {
            get { return categoriesField; }
            set { categoriesField = value; }
        }

        /// <remarks/>
        public long PricingKey
        {
            get { return pricingKeyField; }
            set { pricingKeyField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool PricingKeySpecified
        {
            get { return pricingKeyFieldSpecified; }
            set { pricingKeyFieldSpecified = value; }
        }

        /// <remarks/>
        public string MimeType
        {
            get { return mimeTypeField; }
            set { mimeTypeField = value; }
        }

        /// <remarks/>
        public string OriginalUrl
        {
            get { return originalUrlField; }
            set { originalUrlField = value; }
        }

        /// <remarks/>
        public string UrlCore
        {
            get { return urlCoreField; }
            set { urlCoreField = value; }
        }

        /// <remarks/>
        public string Copyright
        {
            get { return copyrightField; }
            set { copyrightField = value; }
        }

        /// <remarks/>
        [XmlElement(DataType = "base64Binary")]
        public byte[] FileHash
        {
            get { return fileHashField; }
            set { fileHashField = value; }
        }

        /// <remarks/>
        public string PageUrl
        {
            get { return pageUrlField; }
            set { pageUrlField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public partial class AccessDescriptor
    {
        private ApiAccessMask accessMaskField;
        private AccessType accessTypeField;

        private bool isDerivedField;
        private int realmIdField;

        private string[] viewersField;

        /// <remarks/>
        public int RealmId
        {
            get { return realmIdField; }
            set { realmIdField = value; }
        }

        /// <remarks/>
        public AccessType AccessType
        {
            get { return accessTypeField; }
            set { accessTypeField = value; }
        }

        /// <remarks/>
        public bool IsDerived
        {
            get { return isDerivedField; }
            set { isDerivedField = value; }
        }

        /// <remarks/>
        public ApiAccessMask AccessMask
        {
            get { return accessMaskField; }
            set { accessMaskField = value; }
        }

        /// <remarks/>
        [XmlArrayItem("Viewer", IsNullable = false)]
        public string[] Viewers
        {
            get { return viewersField; }
            set { viewersField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public enum PhotoRotation
    {
        /// <remarks/>
        None,

        /// <remarks/>
        Rotate90,

        /// <remarks/>
        Rotate180,

        /// <remarks/>
        Rotate270,

        /// <remarks/>
        Flip,

        /// <remarks/>
        Rotate90Flip,

        /// <remarks/>
        Rotate180Flip,

        /// <remarks/>
        Rotate270Flip,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public partial class PhotoSetResult
    {
        private PhotoSet[] photoSetsField;

        private int totalCountField;

        /// <remarks/>
        [XmlArrayItem(IsNullable = false)]
        public PhotoSet[] PhotoSets
        {
            get { return photoSetsField; }
            set { photoSetsField = value; }
        }

        /// <remarks/>
        public int TotalCount
        {
            get { return totalCountField; }
            set { totalCountField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public partial class PhotoSet : GroupElement
    {
        private string captionField;
        private int[] categoriesField;

        private DateTime createdOnField;

        private bool createdOnFieldSpecified;

        private int featuredIndexField;

        private bool featuredIndexFieldSpecified;

        private bool isRandomTitlePhotoField;

        private bool isRandomTitlePhotoFieldSpecified;
        private string[] keywordsField;
        private DateTime modifiedOnField;

        private bool modifiedOnFieldSpecified;
        private string pageUrlField;

        private int[] parentGroupsField;
        private long photoBytesField;

        private bool photoBytesFieldSpecified;
        private int photoCountField;

        private bool photoCountFieldSpecified;

        private Photo[] photosField;
        private Photo titlePhotoField;
        private PhotoSetType typeField;

        private bool typeFieldSpecified;

        private string uploadUrlField;
        private int viewsField;

        private bool viewsFieldSpecified;

        /// <remarks/>
        public string Caption
        {
            get { return captionField; }
            set { captionField = value; }
        }

        /// <remarks/>
        public DateTime CreatedOn
        {
            get { return createdOnField; }
            set { createdOnField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool CreatedOnSpecified
        {
            get { return createdOnFieldSpecified; }
            set { createdOnFieldSpecified = value; }
        }

        /// <remarks/>
        public DateTime ModifiedOn
        {
            get { return modifiedOnField; }
            set { modifiedOnField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool ModifiedOnSpecified
        {
            get { return modifiedOnFieldSpecified; }
            set { modifiedOnFieldSpecified = value; }
        }

        /// <remarks/>
        public int PhotoCount
        {
            get { return photoCountField; }
            set { photoCountField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool PhotoCountSpecified
        {
            get { return photoCountFieldSpecified; }
            set { photoCountFieldSpecified = value; }
        }

        /// <remarks/>
        public long PhotoBytes
        {
            get { return photoBytesField; }
            set { photoBytesField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool PhotoBytesSpecified
        {
            get { return photoBytesFieldSpecified; }
            set { photoBytesFieldSpecified = value; }
        }

        /// <remarks/>
        public int Views
        {
            get { return viewsField; }
            set { viewsField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool ViewsSpecified
        {
            get { return viewsFieldSpecified; }
            set { viewsFieldSpecified = value; }
        }

        /// <remarks/>
        public PhotoSetType Type
        {
            get { return typeField; }
            set { typeField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool TypeSpecified
        {
            get { return typeFieldSpecified; }
            set { typeFieldSpecified = value; }
        }

        /// <remarks/>
        public int FeaturedIndex
        {
            get { return featuredIndexField; }
            set { featuredIndexField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool FeaturedIndexSpecified
        {
            get { return featuredIndexFieldSpecified; }
            set { featuredIndexFieldSpecified = value; }
        }

        /// <remarks/>
        public Photo TitlePhoto
        {
            get { return titlePhotoField; }
            set { titlePhotoField = value; }
        }

        /// <remarks/>
        public bool IsRandomTitlePhoto
        {
            get { return isRandomTitlePhotoField; }
            set { isRandomTitlePhotoField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool IsRandomTitlePhotoSpecified
        {
            get { return isRandomTitlePhotoFieldSpecified; }
            set { isRandomTitlePhotoFieldSpecified = value; }
        }

        /// <remarks/>
        [XmlArrayItem("Id", IsNullable = false)]
        public int[] ParentGroups
        {
            get { return parentGroupsField; }
            set { parentGroupsField = value; }
        }

        /// <remarks/>
        [XmlArrayItem(IsNullable = false)]
        public Photo[] Photos
        {
            get { return photosField; }
            set { photosField = value; }
        }

        /// <remarks/>
        [XmlArrayItem("Keyword", IsNullable = false)]
        public string[] Keywords
        {
            get { return keywordsField; }
            set { keywordsField = value; }
        }

        /// <remarks/>
        [XmlArrayItem("Category", IsNullable = false)]
        public int[] Categories
        {
            get { return categoriesField; }
            set { categoriesField = value; }
        }

        /// <remarks/>
        public string UploadUrl
        {
            get { return uploadUrlField; }
            set { uploadUrlField = value; }
        }

        /// <remarks/>
        public string PageUrl
        {
            get { return pageUrlField; }
            set { pageUrlField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public enum PhotoSetType
    {
        /// <remarks/>
        Gallery,

        /// <remarks/>
        Collection,
    }

    /// <remarks/>
    [XmlInclude(typeof (Group))]
    [XmlInclude(typeof (PhotoSet))]
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public partial class GroupElement
    {
        private AccessDescriptor accessDescriptorField;
        private int groupIndexField;

        private bool groupIndexFieldSpecified;

        private bool hideBrandingField;

        private bool hideBrandingFieldSpecified;
        private int idField;
        private string ownerField;
        private string titleField;

        /// <remarks/>
        public int Id
        {
            get { return idField; }
            set { idField = value; }
        }

        /// <remarks/>
        public int GroupIndex
        {
            get { return groupIndexField; }
            set { groupIndexField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool GroupIndexSpecified
        {
            get { return groupIndexFieldSpecified; }
            set { groupIndexFieldSpecified = value; }
        }

        /// <remarks/>
        public string Title
        {
            get { return titleField; }
            set { titleField = value; }
        }

        /// <remarks/>
        public AccessDescriptor AccessDescriptor
        {
            get { return accessDescriptorField; }
            set { accessDescriptorField = value; }
        }

        /// <remarks/>
        public string Owner
        {
            get { return ownerField; }
            set { ownerField = value; }
        }

        /// <remarks/>
        public bool HideBranding
        {
            get { return hideBrandingField; }
            set { hideBrandingField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool HideBrandingSpecified
        {
            get { return hideBrandingFieldSpecified; }
            set { hideBrandingFieldSpecified = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public partial class Group : GroupElement
    {
        private string captionField;

        private int collectionCountField;

        private bool collectionCountFieldSpecified;
        private DateTime createdOnField;

        private bool createdOnFieldSpecified;
        private GroupElement[] elementsField;

        private int galleryCountField;

        private bool galleryCountFieldSpecified;
        private DateTime modifiedOnField;

        private bool modifiedOnFieldSpecified;
        private string pageUrlField;
        private int[] parentGroupsField;

        private int photoCountField;

        private bool photoCountFieldSpecified;
        private int subGroupCountField;

        private bool subGroupCountFieldSpecified;

        /// <remarks/>
        public string Caption
        {
            get { return captionField; }
            set { captionField = value; }
        }

        /// <remarks/>
        public DateTime CreatedOn
        {
            get { return createdOnField; }
            set { createdOnField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool CreatedOnSpecified
        {
            get { return createdOnFieldSpecified; }
            set { createdOnFieldSpecified = value; }
        }

        /// <remarks/>
        public DateTime ModifiedOn
        {
            get { return modifiedOnField; }
            set { modifiedOnField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool ModifiedOnSpecified
        {
            get { return modifiedOnFieldSpecified; }
            set { modifiedOnFieldSpecified = value; }
        }

        /// <remarks/>
        public int CollectionCount
        {
            get { return collectionCountField; }
            set { collectionCountField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool CollectionCountSpecified
        {
            get { return collectionCountFieldSpecified; }
            set { collectionCountFieldSpecified = value; }
        }

        /// <remarks/>
        public int SubGroupCount
        {
            get { return subGroupCountField; }
            set { subGroupCountField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool SubGroupCountSpecified
        {
            get { return subGroupCountFieldSpecified; }
            set { subGroupCountFieldSpecified = value; }
        }

        /// <remarks/>
        public int GalleryCount
        {
            get { return galleryCountField; }
            set { galleryCountField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool GalleryCountSpecified
        {
            get { return galleryCountFieldSpecified; }
            set { galleryCountFieldSpecified = value; }
        }

        /// <remarks/>
        public int PhotoCount
        {
            get { return photoCountField; }
            set { photoCountField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool PhotoCountSpecified
        {
            get { return photoCountFieldSpecified; }
            set { photoCountFieldSpecified = value; }
        }

        /// <remarks/>
        [XmlArrayItem("Id", IsNullable = false)]
        public int[] ParentGroups
        {
            get { return parentGroupsField; }
            set { parentGroupsField = value; }
        }

        /// <remarks/>
        [XmlArrayItem(typeof (Group), IsNullable = false)]
        [XmlArrayItem(typeof (PhotoSet), IsNullable = false)]
        public GroupElement[] Elements
        {
            get { return elementsField; }
            set { elementsField = value; }
        }

        /// <remarks/>
        public string PageUrl
        {
            get { return pageUrlField; }
            set { pageUrlField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public partial class Category
    {
        private int codeField;

        private string displayNameField;

        /// <remarks/>
        public int Code
        {
            get { return codeField; }
            set { codeField = value; }
        }

        /// <remarks/>
        public string DisplayName
        {
            get { return displayNameField; }
            set { displayNameField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public partial class Address
    {
        private string cityField;
        private string companyNameField;

        private string countryField;

        private string emailField;
        private string faxField;
        private string firstNameField;

        private string lastNameField;

        private string otherField;
        private string phone2Field;
        private string phoneField;
        private string stateField;
        private string street2Field;
        private string streetField;
        private string urlField;
        private string zipField;

        /// <remarks/>
        public string FirstName
        {
            get { return firstNameField; }
            set { firstNameField = value; }
        }

        /// <remarks/>
        public string LastName
        {
            get { return lastNameField; }
            set { lastNameField = value; }
        }

        /// <remarks/>
        public string CompanyName
        {
            get { return companyNameField; }
            set { companyNameField = value; }
        }

        /// <remarks/>
        public string Street
        {
            get { return streetField; }
            set { streetField = value; }
        }

        /// <remarks/>
        public string Street2
        {
            get { return street2Field; }
            set { street2Field = value; }
        }

        /// <remarks/>
        public string City
        {
            get { return cityField; }
            set { cityField = value; }
        }

        /// <remarks/>
        public string Zip
        {
            get { return zipField; }
            set { zipField = value; }
        }

        /// <remarks/>
        public string State
        {
            get { return stateField; }
            set { stateField = value; }
        }

        /// <remarks/>
        public string Country
        {
            get { return countryField; }
            set { countryField = value; }
        }

        /// <remarks/>
        public string Phone
        {
            get { return phoneField; }
            set { phoneField = value; }
        }

        /// <remarks/>
        public string Phone2
        {
            get { return phone2Field; }
            set { phone2Field = value; }
        }

        /// <remarks/>
        public string Fax
        {
            get { return faxField; }
            set { faxField = value; }
        }

        /// <remarks/>
        public string Url
        {
            get { return urlField; }
            set { urlField = value; }
        }

        /// <remarks/>
        public string Email
        {
            get { return emailField; }
            set { emailField = value; }
        }

        /// <remarks/>
        public string Other
        {
            get { return otherField; }
            set { otherField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public partial class File
    {
        private byte[] fileHashField;
        private uint heightField;
        private int idField;

        private string mimeTypeField;
        private string sequenceField;

        private string urlCoreField;
        private uint widthField;

        /// <remarks/>
        public int Id
        {
            get { return idField; }
            set { idField = value; }
        }

        /// <remarks/>
        public uint Width
        {
            get { return widthField; }
            set { widthField = value; }
        }

        /// <remarks/>
        public uint Height
        {
            get { return heightField; }
            set { heightField = value; }
        }

        /// <remarks/>
        public string Sequence
        {
            get { return sequenceField; }
            set { sequenceField = value; }
        }

        /// <remarks/>
        public string MimeType
        {
            get { return mimeTypeField; }
            set { mimeTypeField = value; }
        }

        /// <remarks/>
        [XmlElement(DataType = "base64Binary")]
        public byte[] FileHash
        {
            get { return fileHashField; }
            set { fileHashField = value; }
        }

        /// <remarks/>
        public string UrlCore
        {
            get { return urlCoreField; }
            set { urlCoreField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public partial class User
    {
        private decimal balanceField;

        private bool balanceFieldSpecified;
        private string bioField;
        private File bioPhotoField;
        private int collectionCountField;

        private bool collectionCountFieldSpecified;
        private string displayNameField;
        private string domainNameField;
        private DateTime expiresOnField;

        private bool expiresOnFieldSpecified;
        private PhotoSet[] featuredPhotoSetsField;

        private string firstNameField;

        private int galleryCountField;

        private bool galleryCountFieldSpecified;
        private string lastNameField;

        private DateTime lastUpdatedField;

        private bool lastUpdatedFieldSpecified;
        private string loginNameField;

        private Address personalAddressField;
        private long photoBytesField;

        private bool photoBytesFieldSpecified;
        private long photoBytesQuotaField;

        private bool photoBytesQuotaFieldSpecified;
        private int photoCountField;

        private bool photoCountFieldSpecified;
        private string primaryEmailField;
        private Address publicAddressField;

        private PhotoSet[] recentPhotoSetsField;

        private string referralCodeField;
        private Group rootGroupField;

        private long storageQuotaField;

        private bool storageQuotaFieldSpecified;
        private DateTime userSinceField;

        private bool userSinceFieldSpecified;
        private int viewsField;

        private bool viewsFieldSpecified;

        /// <remarks/>
        public string LoginName
        {
            get { return loginNameField; }
            set { loginNameField = value; }
        }

        /// <remarks/>
        public string DisplayName
        {
            get { return displayNameField; }
            set { displayNameField = value; }
        }

        /// <remarks/>
        public string FirstName
        {
            get { return firstNameField; }
            set { firstNameField = value; }
        }

        /// <remarks/>
        public string LastName
        {
            get { return lastNameField; }
            set { lastNameField = value; }
        }

        /// <remarks/>
        public string PrimaryEmail
        {
            get { return primaryEmailField; }
            set { primaryEmailField = value; }
        }

        /// <remarks/>
        public File BioPhoto
        {
            get { return bioPhotoField; }
            set { bioPhotoField = value; }
        }

        /// <remarks/>
        public string Bio
        {
            get { return bioField; }
            set { bioField = value; }
        }

        /// <remarks/>
        public int Views
        {
            get { return viewsField; }
            set { viewsField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool ViewsSpecified
        {
            get { return viewsFieldSpecified; }
            set { viewsFieldSpecified = value; }
        }

        /// <remarks/>
        public int GalleryCount
        {
            get { return galleryCountField; }
            set { galleryCountField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool GalleryCountSpecified
        {
            get { return galleryCountFieldSpecified; }
            set { galleryCountFieldSpecified = value; }
        }

        /// <remarks/>
        public int CollectionCount
        {
            get { return collectionCountField; }
            set { collectionCountField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool CollectionCountSpecified
        {
            get { return collectionCountFieldSpecified; }
            set { collectionCountFieldSpecified = value; }
        }

        /// <remarks/>
        public int PhotoCount
        {
            get { return photoCountField; }
            set { photoCountField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool PhotoCountSpecified
        {
            get { return photoCountFieldSpecified; }
            set { photoCountFieldSpecified = value; }
        }

        /// <remarks/>
        public long PhotoBytes
        {
            get { return photoBytesField; }
            set { photoBytesField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool PhotoBytesSpecified
        {
            get { return photoBytesFieldSpecified; }
            set { photoBytesFieldSpecified = value; }
        }

        /// <remarks/>
        public DateTime UserSince
        {
            get { return userSinceField; }
            set { userSinceField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool UserSinceSpecified
        {
            get { return userSinceFieldSpecified; }
            set { userSinceFieldSpecified = value; }
        }

        /// <remarks/>
        public DateTime LastUpdated
        {
            get { return lastUpdatedField; }
            set { lastUpdatedField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool LastUpdatedSpecified
        {
            get { return lastUpdatedFieldSpecified; }
            set { lastUpdatedFieldSpecified = value; }
        }

        /// <remarks/>
        public Address PublicAddress
        {
            get { return publicAddressField; }
            set { publicAddressField = value; }
        }

        /// <remarks/>
        public Address PersonalAddress
        {
            get { return personalAddressField; }
            set { personalAddressField = value; }
        }

        /// <remarks/>
        [XmlArrayItem(IsNullable = false)]
        public PhotoSet[] RecentPhotoSets
        {
            get { return recentPhotoSetsField; }
            set { recentPhotoSetsField = value; }
        }

        /// <remarks/>
        [XmlArrayItem(IsNullable = false)]
        public PhotoSet[] FeaturedPhotoSets
        {
            get { return featuredPhotoSetsField; }
            set { featuredPhotoSetsField = value; }
        }

        /// <remarks/>
        public Group RootGroup
        {
            get { return rootGroupField; }
            set { rootGroupField = value; }
        }

        /// <remarks/>
        public string ReferralCode
        {
            get { return referralCodeField; }
            set { referralCodeField = value; }
        }

        /// <remarks/>
        public DateTime ExpiresOn
        {
            get { return expiresOnField; }
            set { expiresOnField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool ExpiresOnSpecified
        {
            get { return expiresOnFieldSpecified; }
            set { expiresOnFieldSpecified = value; }
        }

        /// <remarks/>
        public decimal Balance
        {
            get { return balanceField; }
            set { balanceField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool BalanceSpecified
        {
            get { return balanceFieldSpecified; }
            set { balanceFieldSpecified = value; }
        }

        /// <remarks/>
        public string DomainName
        {
            get { return domainNameField; }
            set { domainNameField = value; }
        }

        /// <remarks/>
        public long StorageQuota
        {
            get { return storageQuotaField; }
            set { storageQuotaField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool StorageQuotaSpecified
        {
            get { return storageQuotaFieldSpecified; }
            set { storageQuotaFieldSpecified = value; }
        }

        /// <remarks/>
        public long PhotoBytesQuota
        {
            get { return photoBytesQuotaField; }
            set { photoBytesQuotaField = value; }
        }

        /// <remarks/>
        [XmlIgnore()]
        public bool PhotoBytesQuotaSpecified
        {
            get { return photoBytesQuotaFieldSpecified; }
            set { photoBytesQuotaFieldSpecified = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public enum SortOrder
    {
        /// <remarks/>
        Date,

        /// <remarks/>
        Popularity,

        /// <remarks/>
        Rank,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public enum ShiftOrder
    {
        /// <remarks/>
        CreatedAsc,

        /// <remarks/>
        CreatedDesc,

        /// <remarks/>
        TakenAsc,

        /// <remarks/>
        TakenDesc,

        /// <remarks/>
        TitleAsc,

        /// <remarks/>
        TitleDesc,

        /// <remarks/>
        SizeAsc,

        /// <remarks/>
        SizeDesc,

        /// <remarks/>
        FileNameAsc,

        /// <remarks/>
        FileNameDesc,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable()]
    [XmlType(Namespace = "http://www.zenfolio.com/api/1.1")]
    public enum GroupShiftOrder
    {
        /// <remarks/>
        CreatedAsc,

        /// <remarks/>
        CreatedDesc,

        /// <remarks/>
        ModifiedAsc,

        /// <remarks/>
        ModifiedDesc,

        /// <remarks/>
        TitleAsc,

        /// <remarks/>
        TitleDesc,

        /// <remarks/>
        GroupsTop,

        /// <remarks/>
        GroupsBottom,
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetChallengeCompletedEventHandler(object sender, GetChallengeCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetChallengeCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetChallengeCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public AuthChallenge Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((AuthChallenge) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void PartnerPreAuthenticatePlainCompletedEventHandler(
        object sender, PartnerPreAuthenticatePlainCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class PartnerPreAuthenticatePlainCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal PartnerPreAuthenticatePlainCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                               object userState) :
                                                                   base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void PartnerAuthenticateCompletedEventHandler(object sender, PartnerAuthenticateCompletedEventArgs e
        );

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class PartnerAuthenticateCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal PartnerAuthenticateCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                       object userState) :
                                                           base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void PartnerCreateUserCompletedEventHandler(object sender, PartnerCreateUserCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class PartnerCreateUserCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal PartnerCreateUserCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void AuthenticatePlainCompletedEventHandler(object sender, AuthenticatePlainCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class AuthenticatePlainCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal AuthenticatePlainCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void AuthenticateCompletedEventHandler(object sender, AuthenticateCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class AuthenticateCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal AuthenticateCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void LoadPrivateProfileCompletedEventHandler(object sender, LoadPrivateProfileCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class LoadPrivateProfileCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal LoadPrivateProfileCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                      object userState) :
                                                          base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public User Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((User) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void LoadPublicProfileCompletedEventHandler(object sender, LoadPublicProfileCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class LoadPublicProfileCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal LoadPublicProfileCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public User Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((User) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void LoadGroupHierarchyCompletedEventHandler(object sender, LoadGroupHierarchyCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class LoadGroupHierarchyCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal LoadGroupHierarchyCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                      object userState) :
                                                          base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Group Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Group) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void LoadGroupCompletedEventHandler(object sender, LoadGroupCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class LoadGroupCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal LoadGroupCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Group Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Group) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void LoadPhotoSetCompletedEventHandler(object sender, LoadPhotoSetCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class LoadPhotoSetCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal LoadPhotoSetCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public PhotoSet Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((PhotoSet) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void LoadPhotoCompletedEventHandler(object sender, LoadPhotoCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class LoadPhotoCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal LoadPhotoCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Photo Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Photo) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void KeyringAddKeyPlainCompletedEventHandler(object sender, KeyringAddKeyPlainCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class KeyringAddKeyPlainCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal KeyringAddKeyPlainCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                      object userState) :
                                                          base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCategoriesCompletedEventHandler(object sender, GetCategoriesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetCategoriesCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetCategoriesCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Category[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Category[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void SearchSetByCategoryCompletedEventHandler(object sender, SearchSetByCategoryCompletedEventArgs e
        );

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class SearchSetByCategoryCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal SearchSetByCategoryCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                       object userState) :
                                                           base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public PhotoSetResult Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((PhotoSetResult) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void SearchSetByTextCompletedEventHandler(object sender, SearchSetByTextCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class SearchSetByTextCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal SearchSetByTextCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                   object userState) :
                                                       base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public PhotoSetResult Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((PhotoSetResult) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetPopularSetsCompletedEventHandler(object sender, GetPopularSetsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetPopularSetsCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetPopularSetsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                  object userState) :
                                                      base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public PhotoSet[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((PhotoSet[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetRecentSetsCompletedEventHandler(object sender, GetRecentSetsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetRecentSetsCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetRecentSetsCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public PhotoSet[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((PhotoSet[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void SearchPhotoByCategoryCompletedEventHandler(
        object sender, SearchPhotoByCategoryCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class SearchPhotoByCategoryCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal SearchPhotoByCategoryCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                         object userState) :
                                                             base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public PhotoResult Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((PhotoResult) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void SearchPhotoByTextCompletedEventHandler(object sender, SearchPhotoByTextCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class SearchPhotoByTextCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal SearchPhotoByTextCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public PhotoResult Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((PhotoResult) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetPopularPhotosCompletedEventHandler(object sender, GetPopularPhotosCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetPopularPhotosCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetPopularPhotosCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                    object userState) :
                                                        base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Photo[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Photo[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetRecentPhotosCompletedEventHandler(object sender, GetRecentPhotosCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetRecentPhotosCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetRecentPhotosCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                   object userState) :
                                                       base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Photo[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Photo[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateGroupCompletedEventHandler(object sender, CreateGroupCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class CreateGroupCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal CreateGroupCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Group Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Group) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteGroupCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdateGroupCompletedEventHandler(object sender, UpdateGroupCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UpdateGroupCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal UpdateGroupCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Group Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Group) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreatePhotoSetCompletedEventHandler(object sender, CreatePhotoSetCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class CreatePhotoSetCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal CreatePhotoSetCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                  object userState) :
                                                      base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public PhotoSet Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((PhotoSet) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeletePhotoSetCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdatePhotoSetCompletedEventHandler(object sender, UpdatePhotoSetCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UpdatePhotoSetCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal UpdatePhotoSetCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                  object userState) :
                                                      base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public PhotoSet Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((PhotoSet) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeletePhotoCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdatePhotoCompletedEventHandler(object sender, UpdatePhotoCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UpdatePhotoCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal UpdatePhotoCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Photo Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Photo) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void CollectionAddPhotoCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void CollectionRemovePhotoCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdatePhotoAccessCompletedEventHandler(object sender, UpdatePhotoAccessCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UpdatePhotoAccessCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal UpdatePhotoAccessCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((int) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdatePhotoSetAccessCompletedEventHandler(
        object sender, UpdatePhotoSetAccessCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UpdatePhotoSetAccessCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal UpdatePhotoSetAccessCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                        object userState) :
                                                            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((int) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdateGroupAccessCompletedEventHandler(object sender, UpdateGroupAccessCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UpdateGroupAccessCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal UpdateGroupAccessCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((int) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void ReorderPhotoSetCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void MovePhotoCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void RotatePhotoCompletedEventHandler(object sender, RotatePhotoCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class RotatePhotoCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal RotatePhotoCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Photo Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Photo) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void SetGroupTitlePhotoCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void SetPhotoSetTitlePhotoCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void SetPhotoSetFeaturedIndexCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void MovePhotoSetCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void ReorderGroupCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void ReplacePhotoCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void MoveGroupCompletedEventHandler(object sender, AsyncCompletedEventArgs e);
}

#pragma warning restore 1591